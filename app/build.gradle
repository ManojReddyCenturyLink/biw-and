apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'org.jetbrains.dokka'

apply plugin: 'kotlin-kapt'

apply plugin: "org.jlleitschuh.gradle.ktlint"

apply plugin: 'com.google.gms.google-services'

apply plugin: 'com.google.firebase.crashlytics'

ext.localProperties = new Properties()
def propFile = rootProject.file('local.properties')
def jsonFile = file('build_config.json')
def parsedJson = new groovy.json.JsonSlurper().parseText(jsonFile.text)
if (propFile.exists()) {
    localProperties.load(propFile.newDataInputStream())
}
ext.getLocalProperty = { propertyName ->
    def property = localProperties.getProperty(propertyName)
    return property == null ? "" : property
}
android {
    flavorDimensions "environment"
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.centurylink.biwf"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "MOBILE_NUMBER", "\"$parsedJson.MOBILE_NUMBER\""
        // Google Maps
        manifestPlaceholders = [mapsApiKey: parsedJson.MAP_API_KEY]
    }

    signingConfigs {
        debug {
            storeFile file("${project.rootDir}/debug.keystore")
            storePassword "password"
            keyAlias "debug"
            keyPassword "password"
        }

        release {
            def fileName = getLocalProperty("release_store_file")
            if (!fileName.isEmpty()) {
                storeFile file(fileName)
                storePassword getLocalProperty("release_store_password")
                keyAlias getLocalProperty("release_key_alias")
                keyPassword getLocalProperty("release_key_password")
            }
        }
    }

    productFlavors {
        dev {
            applicationIdSuffix ".debug"
            dimension "environment"
            buildConfigField("String", "CTL_APP_NAME", "\"$parsedJson.productFlavors.dev.CTL_APP_NAME\"")
            buildConfigField("String", "CTL_APP_BUNDLE", "\"$parsedJson.productFlavors.dev.CTL_APP_BUNDLE\"")
            buildConfigField("String", "APIGEE_URL", "\"$parsedJson.productFlavors.dev.APIGEE_URL\"")
            buildConfigField("String", "SALESFORCE_URL", "\"$parsedJson.productFlavors.dev.SALESFORCE_URL\"")
            buildConfigField("String", "COMMUNITY_NAME", "\"$parsedJson.productFlavors.dev.COMMUNITY_NAME\"")
            buildConfigField("String", "CLIENT_ID", "\"$parsedJson.productFlavors.dev.CLIENT_ID\"")
            buildConfigField("String", "SALES_FORCE_VERSION", "\"$parsedJson.productFlavors.dev.SALES_FORCE_VERSION\"")
            buildConfigField("String", "APEGEE_VERSION", "\"$parsedJson.productFlavors.dev.APIGEE_VERSION\"")
            buildConfigField("String", "AGENT_POD", "\"$parsedJson.productFlavors.dev.live_chat.AGENT_POD\"")
            buildConfigField("String", "ORG_ID", "\"$parsedJson.productFlavors.dev.live_chat.ORG_ID\"")
            buildConfigField("String", "DEPLOYMENT_ID", "\"$parsedJson.productFlavors.dev.live_chat.DEPLOYMENT_ID\"")
            buildConfigField("String", "BUTTON_ID", "\"$parsedJson.productFlavors.dev.live_chat.BUTTON_ID\"")
        }
//        qa {
//            applicationIdSuffix ".qa"
//            dimension "environment"
//            buildConfigField("String", "CTL_APP_NAME", "\"$parsedJson.productFlavors.qa.CTL_APP_NAME\"")
//            buildConfigField("String", "CTL_APP_BUNDLE", "\"$parsedJson.productFlavors.qa.CTL_APP_BUNDLE\"")
//            buildConfigField("String", "APIGEE_URL", "\"$parsedJson.productFlavors.qa.APIGEE_URL\"")
//            buildConfigField("String", "SALESFORCE_URL", "\"$parsedJson.productFlavors.qa.SALESFORCE_URL\"")
//            buildConfigField("String", "COMMUNITY_NAME", "\"$parsedJson.productFlavors.qa.COMMUNITY_NAME\"")
//            buildConfigField("String", "CLIENT_ID", "\"$parsedJson.productFlavors.qa.CLIENT_ID\"")
//            buildConfigField("String", "SALES_FORCE_VERSION", "\"$parsedJson.productFlavors.qa.SALES_FORCE_VERSION\"")
//            buildConfigField("String", "APEGEE_VERSION", "\"$parsedJson.productFlavors.qa.APIGEE_VERSION\"")
//            buildConfigField("String", "AGENT_POD", "\"$parsedJson.productFlavors.qa.live_chat.AGENT_POD\"")
//            buildConfigField("String", "ORG_ID", "\"$parsedJson.productFlavors.qa.live_chat.ORG_ID\"")
//            buildConfigField("String", "DEPLOYMENT_ID", "\"$parsedJson.productFlavors.qa.live_chat.DEPLOYMENT_ID\"")
//            buildConfigField("String", "BUTTON_ID", "\"$parsedJson.productFlavors.qa.live_chat.BUTTON_ID\"")
//        }
        sit {
            applicationIdSuffix ".sit"
            dimension "environment"
            buildConfigField("String", "CTL_APP_NAME", "\"$parsedJson.productFlavors.sit.CTL_APP_NAME\"")
            buildConfigField("String", "CTL_APP_BUNDLE", "\"$parsedJson.productFlavors.sit.CTL_APP_BUNDLE\"")
            buildConfigField("String", "APIGEE_URL", "\"$parsedJson.productFlavors.sit.APIGEE_URL\"")
            buildConfigField("String", "SALESFORCE_URL", "\"$parsedJson.productFlavors.sit.SALESFORCE_URL\"")
            buildConfigField("String", "COMMUNITY_NAME", "\"$parsedJson.productFlavors.sit.COMMUNITY_NAME\"")
            buildConfigField("String", "CLIENT_ID", "\"$parsedJson.productFlavors.sit.CLIENT_ID\"")
            buildConfigField("String", "SALES_FORCE_VERSION", "\"$parsedJson.productFlavors.sit.SALES_FORCE_VERSION\"")
            buildConfigField("String", "APEGEE_VERSION", "\"$parsedJson.productFlavors.sit.APEGEE_VERSION\"")
            buildConfigField("String", "AGENT_POD", "\"$parsedJson.productFlavors.sit.live_chat.AGENT_POD\"")
            buildConfigField("String", "ORG_ID", "\"$parsedJson.productFlavors.sit.live_chat.ORG_ID\"")
            buildConfigField("String", "DEPLOYMENT_ID", "\"$parsedJson.productFlavors.sit.live_chat.DEPLOYMENT_ID\"")
            buildConfigField("String", "BUTTON_ID", "\"$parsedJson.productFlavors.sit.live_chat.BUTTON_ID\"")

        }
        prod {
            dimension "environment"
            buildConfigField("String", "CTL_APP_NAME", "\"$parsedJson.productFlavors.prod.CTL_APP_NAME\"")
            buildConfigField("String", "CTL_APP_BUNDLE", "\"$parsedJson.productFlavors.prod.CTL_APP_BUNDLE\"")
            buildConfigField("String", "APIGEE_URL", "\"$parsedJson.productFlavors.prod.APIGEE_URL\"")
            buildConfigField("String", "SALESFORCE_URL", "\"$parsedJson.productFlavors.prod.SALESFORCE_URL\"")
            buildConfigField("String", "COMMUNITY_NAME", "\"$parsedJson.productFlavors.prod.COMMUNITY_NAME\"")
            buildConfigField("String", "CLIENT_ID", "\"$parsedJson.productFlavors.prod.CLIENT_ID\"")
            buildConfigField("String", "SALES_FORCE_VERSION", "\"$parsedJson.productFlavors.prod.SALES_FORCE_VERSION\"")
            buildConfigField("String", "APEGEE_VERSION", "\"$parsedJson.productFlavors.prod.APEGEE_VERSION\"")
            buildConfigField("String", "AGENT_POD", "\"$parsedJson.productFlavors.prod.live_chat.AGENT_POD\"")
            buildConfigField("String", "ORG_ID", "\"$parsedJson.productFlavors.prod.live_chat.ORG_ID\"")
            buildConfigField("String", "DEPLOYMENT_ID", "\"$parsedJson.productFlavors.prod.live_chat.DEPLOYMENT_ID\"")
            buildConfigField("String", "BUTTON_ID", "\"$parsedJson.productFlavors.prod.live_chat.BUTTON_ID\"")
        }
    }

    buildTypes {
        debug {
            //TODO will disable proguard before merging in master- this is just testing purpose
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            def releaseMapsApiKey = getLocalProperty("release_maps_api_key")
            manifestPlaceholders = [mapsApiKey: "$releaseMapsApiKey"]
            minifyEnabled false
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures {
        viewBinding = true
    }

    androidExtensions {
        experimental = true
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }

    packagingOptions {
        exclude 'META-INF/*'
        exclude 'license/*'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
    }
}

dependencies {
    //Android Core libraries and
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(":library:mockintegrationserver")

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutineVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "com.jakewharton.threetenabp:threetenabp:$threeThenABPVersion"

    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.core:core-ktx:$androidxCoreVersion"
    implementation "androidx.constraintlayout:constraintlayout:$androidxConstraintLayoutVersion"
    implementation "androidx.viewpager2:viewpager2:${viewpager2Version}"
    implementation "androidx.recyclerview:recyclerview:${recyclerview}"
    implementation "androidx.cardview:cardview:$cardviewVersion"
    implementation "androidx.security:security-crypto:$androidxSecurityVersion"
    implementation "com.google.android.material:material:${materialComponentsVersion}"

    /* Dagger2 - default dependency */
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    //salesforce
    implementation "com.salesforce.service:chat-ui:4.1.1"

    /* Dagger2 - We are going to use dagger.android which includes
   * support for Activity and fragment injection so we need to include
   * the following dependencies */
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"
    kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"

    //Gson
    implementation "com.google.code.gson:gson:$gsonVersion"

    //LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$androidxLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$androidxLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$androidxLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$androidxLifecycleVersion"

    // Parceler in Kotlin
    implementation "org.parceler:parceler-api:$parcelerVersion"
    kapt "org.parceler:parceler:$parcelerVersion"

    //retrofit
    implementation "com.squareup.retrofit2:retrofit:$retroFit2Version"
    implementation "com.squareup.retrofit2:converter-gson:$retroFit2Version"
    implementation "com.squareup.okhttp3:logging-interceptor:$logginginterceptor"

    //timber
    implementation "com.jakewharton.timber:timber:$timberVersion"
    implementation "com.github.ome450901:SimpleRatingBar:$ratingVersion"

    // AppAuth
    implementation "net.openid:appauth:0.7.1"

    //biometrics
    implementation "androidx.biometric:biometric:$biometricVersion"

    //Google-map
    implementation "com.google.android.gms:play-services-maps:$googleMapVersion"

    //Caldroid
    implementation "com.github.vpotvin:$caldroidVersion"

    //WorkManager
    implementation "androidx.work:work-runtime-ktx:$workManagerVersion"

    implementation "com.github.kenglxn.QRGen:android:2.6.0"

    //SwipeRefreshLayout
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swiperefreshlayout"

    //Custom Time Picker Dialog
    implementation 'com.wdullaer:materialdatetimepicker:4.2.3'

    // Google Analytics Tag Manager
    implementation "com.google.android.gms:play-services-tagmanager:$googleTagManagerVersion"

    //Google Firebase SDK for Crashlytics
    implementation "com.google.firebase:firebase-crashlytics:$crashlyticsVersion"

    //Google Firebase SDK for Google Analytics
    implementation "com.google.firebase:firebase-analytics-ktx:$googleAnalyticsVersion"

    implementation "androidx.security:security-crypto:1.0.0-alpha02"


    //TEST IMPLEMENTATION
    testImplementation "junit:junit:$jUnitVersion"
    testImplementation "io.mockk:mockk:$mockKVersion"
    testImplementation "androidx.arch.core:core-testing:$archCoreTestingVersion"
    testImplementation "org.amshove.kluent:kluent-android:$kluentVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutineVersion"
    androidTestImplementation "androidx.test.ext:junit:$testRunnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoCoreVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.4.0"
    testImplementation "org.threeten:threetenbp:1.4.4"
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/dokka"
}

ktlint {
    android = true
    outputToConsole = true
    outputColorName = "YELLOW"
    disabledRules = ["no-wildcard-imports", "import-ordering", "max-line-length"]
    filter {
        exclude("**/generated/**")
    }
}
